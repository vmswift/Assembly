Microsoft (R) Macro Assembler Version 11.00.50727.1	    06/21/15 02:56:55
MASM Demo				(main.asm	     Page 1 - 1


				;Written by: John Knowles (jknowle2@my.athens.edu)
				;Class: CS340 Summer 2015
				;Date: June 16, 2015
				;Assignment: Triangle?
				;Program Description:
				;write a program to find if a data given is of a triangle
				;using a^2+b^2=c^2, read data from file, 
				;no requiremnts were made to print to file
				TITLE MASM Demo				(main.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 00000000 64 61 74 61 2E	infname		byte  "data.txt",0 ;input file name
	   74 78 74 00
 00000009 00000000		infile      dword  0     ;input file handle
 0000000D  00000096 [		buff		byte  150 dup(' ') ;read buffer
	    20
	   ]
 000000A3 00000000		sideA		dword ? ;sideA value
 000000A7 00000000		sideB		dword ? ;sideB value
 000000AB 00000000		sideC		dword ? ;sideC value
 000000AF 00000000		temp		dword ? ;temp if needed
 000000B3 49 73 20 61 20	tri			byte "Is a Triagle",0ah,0dh,0ah,0dh,0
	   54 72 69 61 67
	   6C 65 0A 0D 0A
	   0D 00
 000000C4 4E 6F 74 20 61	notTri      byte "Not a Triangle!",0ah,0dh,0ah,0dh,0
	   20 54 72 69 61
	   6E 67 6C 65 21
	   0A 0D 0A 0D 00
				;last two arrays are for printing on the fly

 00000000			.code
 00000000			main PROC
 00000000  E8 00000050		call readIn
				;read in data to buff
 00000005  E8 00000000 E	call closeFile
				;close file that was opened
 0000000A  8D 35 0000000D R	lea esi,buff
				;esi set to buffer

 00000010			loopy: 
 00000010  E8 00000066		call AtoI
				;convert to Int until anything but digits
 00000015  A3 000000A3 R	mov sideA,eax
				;mov converted digit into sideA for storage
 0000001A  E8 00000093		call IncToNext
				;mov to next digit

 0000001F  E8 00000057		call AtoI
				;conver ascii number to int
 00000024  A3 000000A7 R	mov sideB,eax
				;mov eax into sideB for storage
 00000029  E8 00000084		call IncToNext
				;inc to next digit

 0000002E  E8 00000048		call AtoI
				;convert digit to int
 00000033  A3 000000AB R	mov sideC,eax
				;saved converted digit into sideC
 00000038  E8 00000088		call NextLine
				;prints LF,CR
 0000003D  E8 00000092		call checkTri
				;check if data given forms a triangle
				;prints if it is or not
 00000042  E8 0000006B		call IncToNext
				;inc to next line of digits in buffer
 00000047  EB C7		jmp loopy
				;unconditional jump
				;IncToNext will catch my eof marker '$'
				;and kill the loop with endAll


 00000049			endALL::
				;endAll can be called within any procedure to kill a loop when needed
 00000049  E8 00000000 E	call dumpRegs
				exit
 00000055			main ENDP

 00000055			readIn PROC
				;read in all of the data at 1 time
 00000055  8D 15 00000000 R	lea edx,infname
				;read in file name set
 0000005B  E8 00000000 E	call OpenInputFile
				;open read in file
 00000060  A3 00000009 R	mov infile,eax
				;file handler save in infile
 00000065  8D 15 0000000D R	lea edx,buff
				;address for buff set to edx
 0000006B  B9 00000096		mov ecx,150
				;number of bytes to read in is 150
 00000070  E8 00000000 E	call ReadFromFile
				;read data from file
 00000075  A1 00000009 R	mov eax,infile
				;set file handle back into eax
 0000007A  C3			ret
 0000007B			readIn ENDP

 0000007B			AtoI proc
				;convert ascii to integer
 0000007B  B8 00000000		mov eax,0
				;eax is zero
 00000080  BB 0000000A		mov ebx,10
				;ebx is 10 for multiply
 00000085  B9 00000000		mov ecx,0
				;ecx is 0
 0000008A			nextChar:
 0000008A  8A 0E				  mov cl,[esi]
						  ;move current esi into cl
 0000008C  A3 000000AF R			  mov temp,eax
						  ;mov eax into temp
 00000091  8A C1				  mov al,cl
						  ;mov cl into al
 00000093  E8 00000000 E			  call writeChar
						  ;print al
 00000098  A1 000000AF R			  mov eax,temp
						  ;restore eax to original value

 0000009D  80 F9 30				  cmp cl,'0'
 000000A0  7C 0F				  jl getOut
						  ;check if cl is less than '0'

 000000A2  83 F9 39				  cmp ecx,'9'
 000000A5  7F 0A				  jg getOut
						  ;check if ecx is greater than '9'

 000000A7  80 C1 D0				  add cl,-30h
						  ;add -30h to cl to convert to single int
 000000AA  F7 E3				  mul ebx
						  ;multiply eax by 10 to make room for single int
 000000AC  03 C1				  add eax,ecx
						  ;add single into to eax
 000000AE  46					  inc esi
						  ;increment esi to next location
 000000AF  EB D9				  jmp nextChar
						  ;unconditional jump to nextChar
 000000B1			getOut: 
						  ;label to kill loop
 000000B1  C3					  ret
 000000B2			AtoI endp

 000000B2			IncToNext proc
				;inc to next set of digits
 000000B2  46			loopsy:   inc esi
						  ;increment esi to next location
 000000B3  8A 0E				  mov cl,[esi]
						  ;mov esi into cl
 000000B5  83 F9 24				  cmp ecx,'$'
 000000B8  74 8F				  je endAll
						  ;if ecx is '$' then stop then break loop in main program
 000000BA  80 F9 30				  cmp cl,'0'
 000000BD  7C F3				  jl loopsy
						  ;if cl is less than '0' then keep searching
 000000BF  83 F9 39				  cmp ecx,'9'
 000000C2  7F EE				  jg loopsy
						  ;if ecx is great than 9 then keep searching
 000000C4  C3			ret
 000000C5			IncToNext endp



 000000C5			NextLine proc
				;go to next line output between line reads

 000000C5  B0 0D		mov al,0dh
				;mov CR into al
 000000C7  E8 00000000 E	call writeChar
				;print CR
 000000CC  B0 0A		mov al,0ah
				;move LF into al
 000000CE  E8 00000000 E	call writeChar
				;print LF
 000000D3  C3			ret
 000000D4			NextLine endp



 000000D4			checkTri proc
					;check if A is larger than B or C
 000000D4  A1 000000A3 R		mov eax,sideA
 000000D9  8B 1D 000000A7 R		mov ebx,sideB
 000000DF  E8 000000A4			call checkSidesAB
					;check A with B and C then report back answer
 000000E4  83 FB 00			cmp ebx,0
 000000E7  74 05			je  L1
					;if A isn't largest then check B
 000000E9  83 FB 01			cmp ebx,1
 000000EC  74 34			je L3
					;if A is largest then go to L3 for add check

 000000EE			L1:
					;check if B is larger than A or C
 000000EE  A1 000000A7 R		mov eax,sideB
 000000F3  8B 1D 000000A3 R		mov ebx,sideA
 000000F9  E8 0000008A			call checkSidesAB
					;check B with A and B then report back
 000000FE  83 FB 00			cmp ebx,0
 00000101  74 05			je L2
					;not a triangle then check side C at L2
 00000103  83 FB 01			cmp ebx,1
 00000106  74 33			je L4
					;if a triangle go to L4 for add check

 00000108			L2:
					;check if C is larger than A or B
 00000108  A1 000000AB R		mov eax,sideC
 0000010D  8B 1D 000000A3 R	    mov ebx,sideA
 00000113  E8 00000093			call checkSideC
					;check C with A and B then report back answer
 00000118  83 FB 00			cmp ebx,0
 0000011B  74 50			je notTriangle
					;not a triangle
 0000011D  83 FB 01			cmp ebx,1
 00000120  74 32			je L5
					;if a triangle go to L5 for add check

 00000122			L3: ;if side A was larger than B or C do this
 00000122  BB 00000000			mov ebx,0
 00000127  03 1D 000000A7 R		add ebx,sideB
 0000012D  03 1D 000000AB R		add ebx,sideC
 00000133  3B C3			cmp eax,ebx
 00000135  7C 43			jl triangle
					;if A is less than B+C then triangle
 00000137  3B C3			cmp eax,ebx
 00000139  7D 32			jge notTriangle
					;if A is greater than B+C then notTriangle
					
 0000013B			L4: ;if side B was larger than A or C do this
 0000013B  BB 00000000			mov ebx,0
 00000140  03 1D 000000A3 R		add ebx,sideA
 00000146  03 1D 000000AB R		add ebx,sideC
 0000014C  3B C3			cmp eax,ebx
 0000014E  7C 2A			jl triangle
					;if B is less than A+C then triangle
 00000150  3B C3			cmp eax,ebx
 00000152  7D 19			jge notTriangle
					;if B is greater than A+C then notTriangle

 00000154			L5: ;if side C was larger than A or B do this
 00000154  BB 00000000			mov ebx,0
 00000159  03 1D 000000A3 R		add ebx,sideA
 0000015F  03 1D 000000A7 R		add ebx,sideB
 00000165  3B C3			cmp eax,ebx
 00000167  7C 11			jl triangle
					;if C is less than A+B then triangle
 00000169  3B C3			cmp eax,ebx
 0000016B  7D 00			jge notTriangle
					;if C is greater than A+B then notTriangle

 0000016D			notTriangle:
					;prints not a triangle to screen
 0000016D  8D 3D 000000C4 R		lea edi,notTri
 00000173  E8 00000056			call printChars
 00000178  EB 0D			jmp endit

 0000017A			triangle:
					;prints that it is a triangle
 0000017A  8D 3D 000000B3 R		lea edi,tri
 00000180  E8 00000049			call printChars
 00000185  EB 00			jmp endit
 00000187  C3			endit: ret
 00000188			checkTri endp



 00000188			checkSidesAB proc
				;check for largest value in side A and B
 00000188  3B C3		cmp eax,ebx
 0000018A  7D 04		jge loop1
				;if eax is greater or equal then loop1
 0000018C  3B C3		cmp eax,ebx
 0000018E  7C 15		jl loop2
				;if eax is less than then loop2

 00000190			loop1:
 00000190  8B 1D 000000AB R			  mov ebx,sideC
 00000196  3B C3				  cmp eax,ebx
						  ;check how a or b compares to c
 00000198  7D 04				  jge loop3
						  ;if eax is great then loop 3
 0000019A  3B C3				  cmp eax,ebx
 0000019C  7C 07				  jl loop2
						  ;if eax is less then loop 2
						   
 0000019E			loop3:
						 
 0000019E  BB 00000001				  mov ebx,1
						  ;indicates that eax is largest
 000001A3  EB 05				  jmp endit
 000001A5			loop2: 
 000001A5  BB 00000000				  mov ebx,0
						  ;indicates eax is not largest
 000001AA			endit:
 000001AA  C3			ret
 000001AB			checkSidesAB endp



 000001AB			checkSideC proc
				;check for largest value in side C
 000001AB  3B C3		cmp eax,ebx
 000001AD  7F 04		jg loop1
				;if c is great than A go to loop1
 000001AF  3B C3		cmp eax,ebx
 000001B1  7E 15		jle loop2
				;if c is less than A go to loop2

 000001B3			loop1:
 000001B3  8B 1D 000000A7 R			  mov ebx,sideB
						  ;set ebx to B
 000001B9  3B C3				  cmp eax,ebx
 000001BB  7F 04				  jg loop3
						  ;if C is greater than B go to loop3
 000001BD  3B C3				  cmp eax,ebx
 000001BF  7E 07				  jle loop2
						  ;if C is less than B go to loop2
 000001C1			loop3:
 000001C1  BB 00000001				  mov ebx,1
						  ;indicates C is largest
 000001C6  EB 05				  jmp endit

 000001C8			loop2: 
 000001C8  BB 00000000				  mov ebx,0
						  ;indicates not largest
 000001CD			endit:
 000001CD  C3			ret
 000001CE			checkSideC endp


 000001CE			printChars PROC 
				;print characters in array or consecutive memory locations
				;edi must be set to byte size array before calling
				;reused code modified to take edi instead of esi

 000001CE			nextChar: 
						;begin nextChar loop

 000001CE  8A 07				mov al,[edi]
						;move value from edi current location into al register

 000001D0  3C 00				cmp al,0
						;check if al is null

 000001D2  74 08				je allDone
					    ;previous compare says al register is equal to 0
						;then go to return statement and get out of here
						;only way to break loop

 000001D4  E8 00000000 E			call writeChar
						;call irvine writeChar to print single 
						;byte size character from al register

 000001D9  47					inc edi
						;increment edi to next memory location by 1 byte

 000001DA  EB F2				jmp nextChar
						;unconditional jump to nextChar label

 000001DC  C3			allDone: ret
				;allDone label for getting out of here

 000001DD			printChars ENDP

				END main
Microsoft (R) Macro Assembler Version 11.00.50727.1	    06/21/15 02:56:55
MASM Demo				(main.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000D8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001DD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtoI . . . . . . . . . . . . . .	P Near	 0000007B _TEXT	Length= 00000037 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 0000008A _TEXT	
  getOut . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncToNext  . . . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 00000013 Public STDCALL
  loopsy . . . . . . . . . . . .	L Near	 000000B2 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
NextLine . . . . . . . . . . . .	P Near	 000000C5 _TEXT	Length= 0000000F Public STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkSideC . . . . . . . . . . .	P Near	 000001AB _TEXT	Length= 00000023 Public STDCALL
  loop1  . . . . . . . . . . . .	L Near	 000001B3 _TEXT	
  loop3  . . . . . . . . . . . .	L Near	 000001C1 _TEXT	
  loop2  . . . . . . . . . . . .	L Near	 000001C8 _TEXT	
  endit  . . . . . . . . . . . .	L Near	 000001CD _TEXT	
checkSidesAB . . . . . . . . . .	P Near	 00000188 _TEXT	Length= 00000023 Public STDCALL
  loop1  . . . . . . . . . . . .	L Near	 00000190 _TEXT	
  loop3  . . . . . . . . . . . .	L Near	 0000019E _TEXT	
  loop2  . . . . . . . . . . . .	L Near	 000001A5 _TEXT	
  endit  . . . . . . . . . . . .	L Near	 000001AA _TEXT	
checkTri . . . . . . . . . . . .	P Near	 000000D4 _TEXT	Length= 000000B4 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000EE _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000108 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000122 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000013B _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 00000154 _TEXT	
  notTriangle  . . . . . . . . .	L Near	 0000016D _TEXT	
  triangle . . . . . . . . . . .	L Near	 0000017A _TEXT	
  endit  . . . . . . . . . . . .	L Near	 00000187 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000055 Public STDCALL
  loopy  . . . . . . . . . . . .	L Near	 00000010 _TEXT	
printChars . . . . . . . . . . .	P Near	 000001CE _TEXT	Length= 0000000F Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 000001CE _TEXT	
  allDone  . . . . . . . . . . .	L Near	 000001DC _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readIn . . . . . . . . . . . . .	P Near	 00000055 _TEXT	Length= 00000026 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buff . . . . . . . . . . . . . .	Byte	 0000000D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endALL . . . . . . . . . . . . .	L Near	 00000049 _TEXT	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
infile . . . . . . . . . . . . .	DWord	 00000009 _DATA	
infname  . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
notTri . . . . . . . . . . . . .	Byte	 000000C4 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sideA  . . . . . . . . . . . . .	DWord	 000000A3 _DATA	
sideB  . . . . . . . . . . . . .	DWord	 000000A7 _DATA	
sideC  . . . . . . . . . . . . .	DWord	 000000AB _DATA	
temp . . . . . . . . . . . . . .	DWord	 000000AF _DATA	
tri  . . . . . . . . . . . . . .	Byte	 000000B3 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
