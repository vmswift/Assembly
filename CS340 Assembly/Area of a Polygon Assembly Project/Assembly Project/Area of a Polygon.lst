Microsoft (R) Macro Assembler Version 11.00.50727.1	    06/16/15 13:34:39
MASM Demo				(main.asm	     Page 1 - 1


				;Written by: John Knowles (jknowle2@my.athens.edu)
				;Class: CS340 Summer 2015
				;Date: June 16, 2015
				;Assignment: Area of a Polygon
				;Program Description:
				;given multiple sets of vertices figure out the area of
				;a polygon then print to a file
				TITLE MASM Demo				(main.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 00000000 70 6F 6C 79 69	infname		byte  "polyin.txt",0 ;file name for input
	   6E 2E 74 78 74
	   00
 0000000B 00000000		infile      dword  0 ;input file handle
 0000000F  0000012C [		buff		byte  300 dup(0)  ;buffer containing data from input read
	    00
	   ]
 0000013B 00000000		temp		dword ? ;temp value if needed
 0000013F  00000014 [		poly		dword 20 dup(?)
	    00000000
	   ]
 0000018F 00000000		weight      dword ? ;number of vertices
 00000193 00000000		xtotal      dword ? ;total of x multiply
 00000197 00000000		ytotal      dword ? ;total of y multiply
 0000019B 00000000		answer1		dword ? ;answer for polygon 1
 0000019F 00000000		answer2		dword ? ;answer for polygon 2
 000001A3 00000000		answer3		dword ? ;answer for polygon 3
 000001A7 00000000		answer4		dword ? ;answer for polygon 4
 000001AB 00000000		answer5		dword ? ;answer for polygon 5
 000001AF 70 6F 6C 79 6F	outname	byte  "polyouts.txt",0 ;output file name
	   75 74 73 2E 74
	   78 74 00
 000001BC 00000000		outfile     dword 0    ;output file handler
 000001C0 41 72 65 61 20	p1          byte "Area of Polygon1: "
	   6F 66 20 50 6F
	   6C 79 67 6F 6E
	   31 3A 20
 000001D2  00000003 [		poly1       byte 3 dup(' ')
	    20
	   ]
 000001D5 0D 0A			stop1       byte 0dh,0ah
 000001D7 41 72 65 61 20	p2          byte "Area of Polygon2: "
	   6F 66 20 50 6F
	   6C 79 67 6F 6E
	   32 3A 20
 000001E9  00000003 [		poly2       byte 3 dup(' ')
	    20
	   ]
 000001EC 0D 0A			stop2       byte 0dh,0ah
 000001EE 41 72 65 61 20	p3			byte "Area of Polygon3: "
	   6F 66 20 50 6F
	   6C 79 67 6F 6E
	   33 3A 20
 00000200  00000003 [		poly3       byte 3 dup(' ')
	    20
	   ]
 00000203 0D 0A			stop3       byte 0dh,0ah
 00000205 41 72 65 61 20	p4			byte "Area of Polygon4: "
	   6F 66 20 50 6F
	   6C 79 67 6F 6E
	   34 3A 20
 00000217  00000003 [		poly4		byte 3 dup(' ')
	    20
	   ]
 0000021A 0D 0A			stop4       byte 0dh,0ah
 0000021C 41 72 65 61 20	p5			byte "Area of Polygon5: "
	   6F 66 20 50 6F
	   6C 79 67 6F 6E
	   35 3A 20
 0000022E  00000003 [		poly5		byte 3 dup(' ')
	    20
	   ]
 00000231 0D 0A 00		stop5		byte 0dh,0ah,0
				;p1 through stop5 are a buffer zone for writing to a file



 00000000			.code
 00000000			main PROC

 00000000  E8 00000135		call readIn
				;read data into buffer
 00000005  8D 35 0000000F R	lea esi,buff
				;assign buffer to esi for manipulation

 0000000B  B8 00000004		mov eax,4
				;number of vertices moved to eax
 00000010  A3 0000018F R	mov weight,eax
				;mov eax to weight
 00000015  E8 000000E3		call findAns
				;call FindAns to get the polygons area returned to eax
 0000001A  A3 0000019B R	mov answer1,eax
				;polygon1 answer assigned to answer1

 0000001F  B8 00000003		mov eax,3 ;vertice number
 00000024  A3 0000018F R	mov weight,eax
 00000029  E8 000000CF		call findAns
				;call FindAns to get the polygons area returned to eax
 0000002E  A3 0000019F R	mov answer2,eax
				;place answer in answer2

 00000033  B8 00000004		mov eax,4 ;vertice number
 00000038  A3 0000018F R	mov weight,eax
 0000003D  E8 000000BB		call findAns
				;call FindAns to get the polygons area returned to eax
 00000042  A3 000001A3 R	mov answer3,eax
				;place answer in answer3

 00000047  B8 0000000A		mov eax,10 ;vertice number
 0000004C  A3 0000018F R	mov weight,eax
 00000051  E8 000000A7		call findAns
				;call FindAns to get the polygons area returned to eax
 00000056  A3 000001A7 R	mov answer4,eax
				;place answer in answer3

 0000005B  B8 0000000A		mov eax,10 ;vertice number
 00000060  A3 0000018F R	mov weight,eax
 00000065  E8 00000093		call findAns
				;call FindAns to get the polygons area returned to eax
 0000006A  A3 000001AB R	mov answer5,eax
				;place answer in answer5

 0000006F  E8 00000000 E	call CloseFile
				;make sure previous open file is closed

 00000074  A1 0000019B R	mov eax,answer1
 00000079  8D 35 000001D5 R	lea esi,stop1
 0000007F  E8 000001A0		call ItoA
				;using Int to Ascii the answer is converted

 00000084  A1 0000019F R	mov eax,answer2
 00000089  8D 35 000001EC R	lea esi,stop2
 0000008F  E8 00000190		call ItoA
				;using Int to Ascii the answer is converted

 00000094  A1 000001A3 R	mov eax,answer3
 00000099  8D 35 00000203 R	lea esi,stop3
 0000009F  E8 00000180		call ItoA
				;using Int to Ascii the answer is converted

 000000A4  A1 000001A7 R	mov eax,answer4
 000000A9  8D 35 0000021A R	lea esi,stop4
 000000AF  E8 00000170		call ItoA
				;using Int to Ascii the answer is converted

 000000B4  A1 000001AB R	mov eax,answer5
 000000B9  8D 35 00000231 R	lea esi,stop5
 000000BF  E8 00000160		call ItoA
				;using Int to Ascii the answer is converted

 000000C4  E8 0000000C		call writeOut
				;call procedure to print to file

 000000C9  E8 00000000 E	call CloseFile
				;make sure previous open file is closed

				exit
 000000D5			main ENDP

 000000D5			writeOut proc
 000000D5  8D 15 000001AF R	lea edx,outname
				;output file name is moved to edx
 000000DB  E8 00000000 E	call CreateOutputFile
				;create the file
 000000E0  A3 000001BC R	mov outfile,eax
				;mov file handler to outfile
 000000E5  8D 35 000001C0 R	lea esi,p1
				;assign beginning of print data to esi
 000000EB  B9 00000073		mov ecx,115
				;set amount of bytes to print
 000000F0  8B D6		mov edx,esi
				;mov location of data to edx
 000000F2  E8 00000000 E	call WriteToFile
				;begin writing to the file
 000000F7  A1 000001BC R	mov eax,outfile
				;close the file handler to commit changes
 000000FC  C3			ret
 000000FD			writeOut endp

 000000FD			findAns proc
 000000FD  8D 3D 0000013F R	lea edi,poly
				;edi set to polygon array of x/y values
 00000103  B8 00000000		mov eax,0
				;eax cleared to 0
 00000108  E8 00000053		call AtoI
				;call A to I to convert 
 0000010D  8D 3D 0000013F R	lea edi,poly
				;edi set to polygon array of x/y values
 00000113  8B 0D 0000018F R	mov ecx,weight
				;ecx set to the number of vertices
 00000119  E8 00000091		call calculateX
				;calculate starting with x to multiply
 0000011E  8D 3D 0000013F R	lea edi,poly
				;edi set to beginning position in array
 00000124  8B 0D 0000018F R	mov ecx,weight
				;ecx set to number of vertices
 0000012A  E8 000000AF		call calculateY
				;calculate starting with y to multiply
 0000012F  E8 000000DB		call finalAns
				;calculate final anser minusing x and y then diving by 2
 00000134  E8 00000068		call IncToNext
				;increment to next esi buffer location holding next group of vertices
 00000139  C3			ret
 0000013A			findAns endp

 0000013A			readIn PROC
				;read in all of the data at 1 time
 0000013A  8D 15 00000000 R	lea edx,infname
				;name of file is set for reading
 00000140  E8 00000000 E	call OpenInputFile
				;open that file
 00000145  A3 0000000B R	mov infile,eax
				;infile file handler set
 0000014A  A1 0000000B R	mov eax,infile

 0000014F  8D 15 0000000F R	lea edx,buff
				;set edx to buffer
 00000155  B9 0000012C		mov ecx,300
				;read in 300 bytes
 0000015A  E8 00000000 E	call ReadFromFile
				;call readFromFile to do the work
 0000015F  C3			ret
 00000160			readIn ENDP

 00000160			AtoI proc
				;convert ascii to integer
 00000160  BB 0000000A		mov ebx,10
				;divide by 10 
 00000165  B9 00000000		mov ecx,0
				;counter is 0
 0000016A  B8 00000000		mov eax,0
				;eax is 0

 0000016F			nextChar:
 0000016F  8A 0E				  mov cl,[esi]
						  ;mov current location value to cl
 00000171  80 F9 20				  cmp cl,' '
						  ;check if cl is blankspace
 00000174  74 19				  je L1
						  ;jump to L1 if cl is blankspace
 00000176  80 F9 0D				  cmp cl,0dh
						  ;check if cl is CR
 00000179  74 21				  je L2
						  ;jump to L2 if cl is CR
 0000017B  80 F9 30				  cmp cl,'0'
						  ;cmp cl to '0'
 0000017E  7C 20				  jl getOut
						  ;if cl is less then get out of here
 00000180  80 F9 39				  cmp cl,'9'
						  ;cmp cl to '9'
 00000183  7F 1B				  jg getOut
						  ;if cl is greater then get out of here
						  
 00000185  80 C1 D0				  add cl,-30h
						  ;remove 30 hex to get int number
 00000188  F7 EB				  imul ebx
						  ;multiply by 10 to make room for single digit int
 0000018A  03 C1				  add eax,ecx
						  ;add singl digit to eax
 0000018C  46					  inc esi
						  ;inc esi to next location
 0000018D  EB E0				  jmp nextChar
						  ;jump to nextCharacter loop spot

 0000018F			L1:
 0000018F  89 07				  mov [edi],eax
						  ;at blank space we save converted digit into edi array index
 00000191  B8 00000000				  mov eax,0
						  ;clean up eax
 00000196  83 C7 04				  add edi,4
						  ;increment edi for next location
 00000199  46					  inc esi
						  ;inc esi
 0000019A  EB D3				  jmp nextChar
						  ;jump nextChar to continue loop
 0000019C			L2:
						  ;hit a carraige return
 0000019C  89 07				  mov [edi],eax
						  ;backup eax into edi
 0000019E  EB 00				  jmp getOut
						  ;get out of here
 000001A0			getOut: 
 000001A0  C3					  ret
 000001A1			AtoI endp

 000001A1			IncToNext proc
				;increment to next number value on next line
 000001A1  46			loopsy:   inc esi
 000001A2  8A 0E				  mov cl,[esi]
						  ;mov for check for digit
 000001A4  80 F9 30				  cmp cl,'0'
 000001A7  7C F8				  jl loopsy 
						  ;loop again for digit
 000001A9  80 F9 39				  cmp cl,'9'
 000001AC  7F F3				  jg loopsy
						  ;loop again for digit
 000001AE  C3			ret
 000001AF			IncToNext endp

 000001AF			calculateX proc
				;calculat the values of xi t* yi+1
				;requires edi be set to array of choice
				;requires ecx be set to the number of vertices
 000001AF  B8 00000000		mov eax,0
				;make sure eax is 0
 000001B4  A3 00000193 R	mov xtotal,eax
				;zero out xtotal
 000001B9  8B 57 04		mov edx,[edi+4]
				;save the value of y1 into edx
				;y value 1 stored for final calculation

 000001BC  8B 07		loopsy:	mov eax,[edi]
					    ;mov current position of array into eax
 000001BE  83 F9 01				cmp ecx,1
 000001C1  74 10				je L1
						;check if number of vertices is 1 then jump to L1
 000001C3  8B 5F 0C				mov ebx,[edi+12]
						;mov yi+1 into ebx
 000001C6  F7 E3				mul ebx
						;multiply ebx
 000001C8  01 05 00000193 R			add xtotal,eax
						;add eax to xtotal
 000001CE  83 C7 04				add edi,4
						;inc edi to next position 

 000001D1  E2 E9				loop loopsy
 000001D3			L1:
						;do this for last vertice
 000001D3  8B DA				mov ebx,edx
						;mov y1 into ebx
 000001D5  F7 E3				mul ebx
						;multiply final x value by y1
 000001D7  01 05 00000193 R			add xtotal,eax
						;add final value to xtotal
 000001DD  C3			ret
 000001DE			calculateX endp

 000001DE			calculateY proc
				;calculate the values of xi+1 * yi
				;requires edi be set to arrray of choice
				;requires ecx be set to the number of vertices
 000001DE  B8 00000000		mov eax,0
				;eax zeroed out
 000001E3  A3 00000197 R	mov ytotal,eax
				;ytotal zeroed out
 000001E8  8B 17		mov edx,[edi]
				;x1 value saved to edx
 000001EA  83 C7 04		add edi,4
				;increment edi to y1 position for calculation
 000001ED  8B 07		loopsy:	mov eax,[edi]
						;mov current position into eax
 000001EF  83 F9 01				cmp ecx,1
 000001F2  74 10				je L1
						;if number of vertices is 1, jump to L1
 000001F4  8B 5F 04				mov ebx,[edi+4]
						;mov into ebx the xi+1 value
 000001F7  F7 E3				mul ebx
						;multiply yi and xi+1
 000001F9  83 C7 04				add edi,4
						;inc edi by 4
 000001FC  01 05 00000197 R			add ytotal,eax
						;add eax to ytotal
 00000202  E2 E9				loop loopsy
						;loop to count number of vertices
 00000204			L1:
 00000204  8B DA				mov ebx,edx
						;mov x1 value into ebx
 00000206  F7 E3				mul ebx
						;multiply yfianl by x1
 00000208  01 05 00000197 R			add ytotal,eax
						;add eax to ytotal
 0000020E  C3			ret
 0000020F			calculateY endp

 0000020F			finalAns   proc
 0000020F  A1 00000197 R	mov eax,ytotal
 00000214  8B 1D 00000193 R	mov ebx,xtotal
 0000021A  2B C3		sub eax,ebx
 0000021C  BB 00000002		mov ebx,2
 00000221  F7 FB		idiv ebx
 00000223  C3			ret
 00000224			finalAns   endp

 00000224			ItoA PROC 
						;procedure to convert int to ascii
						;requires esi and eax be set before call
						;esi must be set to a byte size array
 00000224  BA 00000000				mov edx,0
 00000229  BB 0000000A				mov ebx,10
						;ebx set to 10 for division by 10 to get remainder

 0000022E  4E					dec esi
						;decrement esi because esi is set beyond that of array

 0000022F			loopsy:
						;beginning of loopsy jne loop

 0000022F  BA 00000000				mov edx,0
						;edx remainder is reset to zero every time

 00000234  F7 F3				div ebx
						;divied eax by ebx which is 10, remainder stored in edx

 00000236  80 C2 30				add dl,30h
						;add 48 which is 30h in hex to current value
						;stored in edx but used as byte size dl

 00000239  88 16				mov [esi],dl
						;move ascii converted value in dl into byte size array esi

 0000023B  4E					dec esi
						;move from right to left in array

 0000023C  83 F8 00				cmp eax,0
						;check if eax has anything to divide

 0000023F  75 EE				jne loopsy
						;if eax is equal to zero then we are out of here

 00000241  C3				ret
 00000242			ItoA ENDP

				END main
Microsoft (R) Macro Assembler Version 11.00.50727.1	    06/16/15 13:34:39
MASM Demo				(main.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000234 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000242 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtoI . . . . . . . . . . . . . .	P Near	 00000160 _TEXT	Length= 00000041 Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 0000016F _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000018F _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000019C _TEXT	
  getOut . . . . . . . . . . . .	L Near	 000001A0 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IncToNext  . . . . . . . . . . .	P Near	 000001A1 _TEXT	Length= 0000000E Public STDCALL
  loopsy . . . . . . . . . . . .	L Near	 000001A1 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ItoA . . . . . . . . . . . . . .	P Near	 00000224 _TEXT	Length= 0000001E Public STDCALL
  loopsy . . . . . . . . . . . .	L Near	 0000022F _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calculateX . . . . . . . . . . .	P Near	 000001AF _TEXT	Length= 0000002F Public STDCALL
  loopsy . . . . . . . . . . . .	L Near	 000001BC _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000001D3 _TEXT	
calculateY . . . . . . . . . . .	P Near	 000001DE _TEXT	Length= 00000031 Public STDCALL
  loopsy . . . . . . . . . . . .	L Near	 000001ED _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000204 _TEXT	
finalAns . . . . . . . . . . . .	P Near	 0000020F _TEXT	Length= 00000015 Public STDCALL
findAns  . . . . . . . . . . . .	P Near	 000000FD _TEXT	Length= 0000003D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000D5 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readIn . . . . . . . . . . . . .	P Near	 0000013A _TEXT	Length= 00000026 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeOut . . . . . . . . . . . .	P Near	 000000D5 _TEXT	Length= 00000028 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
answer1  . . . . . . . . . . . .	DWord	 0000019B _DATA	
answer2  . . . . . . . . . . . .	DWord	 0000019F _DATA	
answer3  . . . . . . . . . . . .	DWord	 000001A3 _DATA	
answer4  . . . . . . . . . . . .	DWord	 000001A7 _DATA	
answer5  . . . . . . . . . . . .	DWord	 000001AB _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buff . . . . . . . . . . . . . .	Byte	 0000000F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
infile . . . . . . . . . . . . .	DWord	 0000000B _DATA	
infname  . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outfile  . . . . . . . . . . . .	DWord	 000001BC _DATA	
outname  . . . . . . . . . . . .	Byte	 000001AF _DATA	
p1 . . . . . . . . . . . . . . .	Byte	 000001C0 _DATA	
p2 . . . . . . . . . . . . . . .	Byte	 000001D7 _DATA	
p3 . . . . . . . . . . . . . . .	Byte	 000001EE _DATA	
p4 . . . . . . . . . . . . . . .	Byte	 00000205 _DATA	
p5 . . . . . . . . . . . . . . .	Byte	 0000021C _DATA	
poly1  . . . . . . . . . . . . .	Byte	 000001D2 _DATA	
poly2  . . . . . . . . . . . . .	Byte	 000001E9 _DATA	
poly3  . . . . . . . . . . . . .	Byte	 00000200 _DATA	
poly4  . . . . . . . . . . . . .	Byte	 00000217 _DATA	
poly5  . . . . . . . . . . . . .	Byte	 0000022E _DATA	
poly . . . . . . . . . . . . . .	DWord	 0000013F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stop1  . . . . . . . . . . . . .	Byte	 000001D5 _DATA	
stop2  . . . . . . . . . . . . .	Byte	 000001EC _DATA	
stop3  . . . . . . . . . . . . .	Byte	 00000203 _DATA	
stop4  . . . . . . . . . . . . .	Byte	 0000021A _DATA	
stop5  . . . . . . . . . . . . .	Byte	 00000231 _DATA	
temp . . . . . . . . . . . . . .	DWord	 0000013B _DATA	
weight . . . . . . . . . . . . .	DWord	 0000018F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xtotal . . . . . . . . . . . . .	DWord	 00000193 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
ytotal . . . . . . . . . . . . .	DWord	 00000197 _DATA	

	   0 Warnings
	   0 Errors
