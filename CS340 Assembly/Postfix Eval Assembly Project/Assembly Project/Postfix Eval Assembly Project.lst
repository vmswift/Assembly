Microsoft (R) Macro Assembler Version 11.00.50727.1	    06/23/15 14:40:24
%MASM Postfix Evaluation				(main.asm  Page 1 - 1


				;Written by: John Knowles (jknowle2@my.athens.edu)
				;Class: CS340 Summer 2015
				;Date: June 23, 2015
				;Assignment: Postfix Evaluation in Assembly
				;Program Description:
				;read in postfix problems from file
				;solve and print the answers

				TITLE MASM Postfix Evaluation				(main.asm)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data

 00000000 70 6F 73 66 69	infname		byte  "posfix exp.txt",0 ;input file name
	   78 20 65 78 70
	   2E 74 78 74 00
 0000000F 00000000		infile      dword  0		;input file handle
 00000013  00000158 [		buff		byte  344 dup(?) ;read buffer
	    00
	   ]
 0000016B 70 6F 73 74 66	outname    byte  "postfix output.txt",0 ;output file name
	   69 78 20 6F 75
	   74 70 75 74 2E
	   74 78 74 00
 0000017E 00000000		outfile     dword 0 ;output file handle
 00000182 00000000		temp		dword ? ;temp if needed
 00000186  00000032 [		myStack     dword 50 dup(0) ;my stack
	    00000000
	   ]
 0000024E 00000000		mySize      dword 0      ;my current stack size
 00000252 00000000		isNeg       dword 0      ;is negative check variable
 00000256 53 6F 6C 75 74	ans			byte  "Solution1: " ;beginning of read out buffer
	   69 6F 6E 31 3A
	   20
 00000261  0000000A [		            byte  10 dup(' ') ;answer for problem1
	    20
	   ]
 0000026B 0D 0A			stop1       byte  0dh,0ah
 0000026D 53 6F 6C 75 74	ans2	    byte  "Solution2: ";11
	   69 6F 6E 32 3A
	   20
 00000278  0000000A [		            byte  10 dup(' ') ;answer for problem2
	    20
	   ]
 00000282 0D 0A			stop2       byte  0dh,0ah
 00000284 53 6F 6C 75 74	ans3	    byte  "Solution3: ";11
	   69 6F 6E 33 3A
	   20
 0000028F  0000000A [		            byte  10 dup(' ') ;answer for problem3
	    20
	   ]
 00000299 0D 0A			stop3       byte  0dh,0ah
 0000029B 53 6F 6C 75 74	ans4	    byte  "Solution4: ";11
	   69 6F 6E 34 3A
	   20
 000002A6  0000000A [		            byte  10 dup(' ') ;answer for problem4
	    20
	   ]
 000002B0 0D 0A			stop4       byte  0dh,0ah
 000002B2 53 6F 6C 75 74	ans5	    byte  "Solution5: ";11
	   69 6F 6E 35 3A
	   20
 000002BD  0000000A [		            byte  10 dup(' ') ;answer for problem5
	    20
	   ]
 000002C7 0D 0A			stop5       byte  0dh,0ah 
 000002C9 53 6F 6C 75 74	ans6	    byte  "Solution6: ";11
	   69 6F 6E 36 3A
	   20
 000002D4  0000000A [		            byte  10 dup(' ') ;answer for problem6
	    20
	   ]
 000002DE 0D 0A			stop6       byte  0dh,0ah
 000002E0 53 6F 6C 75 74	ans7	    byte  "Solution7: ";11
	   69 6F 6E 37 3A
	   20
 000002EB  0000000A [		            byte  10 dup(' ') ;answer for problem7
	    20
	   ]
 000002F5 0D 0A			stop7       byte  0dh,0ah
 000002F7 53 6F 6C 75 74	ans8	    byte  "Solution8: ";11
	   69 6F 6E 38 3A
	   20
 00000302  0000000A [		            byte  10 dup(' ') ;answer for problem8
	    20
	   ]
 0000030C 0D 0A			stop8       byte  0dh,0ah
 0000030E 53 6F 6C 75 74	ans9	    byte  "Solution9: ";11
	   69 6F 6E 39 3A
	   20
 00000319  0000000A [		            byte  10 dup(' ') ;answer for problem9
	    20
	   ]
 00000323 0D 0A			stop9       byte  0dh,0ah   
 00000325 53 6F 6C 75 74	ans10	    byte  "Solution10: ";12
	   69 6F 6E 31 30
	   3A 20
 00000331  0000000A [		            byte  10 dup(' ') ;answer for problem10
	    20
	   ]
 0000033B 0D 0A			stop10     byte  0dh,0ah
 0000033D 53 6F 6C 75 74	ans11	    byte  "Solution11: ";12
	   69 6F 6E 31 31
	   3A 20
 00000349  0000000A [		            byte  10 dup(' ') ;answer for problem11
	    20
	   ]
 00000353 0D 0A			stop11       byte  0dh,0ah
 00000355 53 6F 6C 75 74	ans12	    byte  "Solution12: ";12
	   69 6F 6E 31 32
	   3A 20
 00000361  0000000A [		            byte  10 dup(' ') ;answer for problem12
	    20
	   ]
 0000036B 0D 0A			stop12       byte  0dh,0ah
 0000036D 53 6F 6C 75 74	ans13	    byte  "Solution13: ";12
	   69 6F 6E 31 33
	   3A 20
 00000379  0000000A [		            byte  10 dup(' ') ;answer for problem13
	    20
	   ]
 00000383 0D 0A 00		stop13       byte  0dh,0ah,0
 00000000			.code
 00000000			main PROC
 00000000  E8 00000152			call readIn
					;read in the data from file
 00000005  8D 35 00000013 R		lea esi,buff
					;load buff address into esi
 0000000B  8A 0E			mov cl,[esi]
					;set cl to the value of [esi]

 0000000D  E8 0000023A			call checkDo
					;checks what operation to do and does it
 00000012  E8 0000020F			call popStk
					;pop off the answer from stack
 00000017  8D 3D 0000026B R		lea edi,stop1
					;mov stop1 address into edi
 0000001D  E8 0000015B			call ItoA
					;convert answer to Ascii and put in what is before stop1

 00000022  E8 00000225			call checkDo
 00000027  E8 000001FA			call popStk
 0000002C  8D 3D 00000282 R		lea edi,stop2
 00000032  E8 00000146			call ItoA
					;repitition of first checkDo set
					;Problem2

 00000037  E8 00000210			call checkDo
 0000003C  E8 000001E5			call popStk
 00000041  8D 3D 00000299 R		lea edi,stop3
 00000047  E8 00000131			call ItoA
					;repitition of first checkDo set
					;Problem3

 0000004C  E8 000001FB			call checkDo
 00000051  E8 000001D0			call popStk
 00000056  8D 3D 000002B0 R		lea edi,stop4
 0000005C  E8 0000011C			call ItoA
					;repitition of first checkDo set
					;Problem4

 00000061  E8 000001E6			call checkDo
 00000066  E8 000001BB			call popStk
 0000006B  8D 3D 000002C7 R		lea edi,stop5
 00000071  E8 00000107			call ItoA
					;repitition of first checkDo set
					;Problem5

 00000076  E8 000001D1			call checkDo
 0000007B  E8 000001A6			call popStk
 00000080  8D 3D 000002DE R		lea edi,stop6
 00000086  E8 000000F2			call ItoA
					;repitition of first checkDo set
					;Problem6

 0000008B  E8 000001BC			call checkDo
 00000090  E8 00000191			call popStk
 00000095  8D 3D 000002F5 R		lea edi,stop7
 0000009B  E8 000000DD			call ItoA
					;repitition of first checkDo set
					;Problem7

 000000A0  E8 000001A7			call checkDo
 000000A5  E8 0000017C			call popStk
 000000AA  8D 3D 0000030C R		lea edi,stop8
 000000B0  E8 000000C8			call ItoA
					;repitition of first checkDo set
					;Problem8

 000000B5  E8 00000192			call checkDo
 000000BA  E8 00000167			call popStk
 000000BF  8D 3D 00000323 R		lea edi,stop9
 000000C5  E8 000000B3			call ItoA
					;repitition of first checkDo set
					;Problem9

 000000CA  E8 0000017D			call checkDo
 000000CF  E8 00000152			call popStk
 000000D4  8D 3D 0000033B R		lea edi,stop10
 000000DA  E8 0000009E			call ItoA
					;repitition of first checkDo set
					;Problem10
					
 000000DF  E8 00000168			call checkDo
 000000E4  E8 0000013D			call popStk
 000000E9  8D 3D 00000353 R		lea edi,stop11
 000000EF  E8 00000089			call ItoA
					;repitition of first checkDo set
					;Problem11

 000000F4  E8 00000153			call checkDo
 000000F9  E8 00000128			call popStk
 000000FE  8D 3D 0000036B R		lea edi,stop12
 00000104  E8 00000074			call ItoA
					;repitition of first checkDo set
					;Problem12

 00000109  E8 0000013E			call checkDo
 0000010E  E8 00000113			call popStk
 00000113  8D 3D 00000383 R		lea edi,stop13
 00000119  E8 0000005F			call ItoA
					;repitition of first checkDo set
					;Problem13

 0000011E  E8 00000007			call writeOut
					;write to output buffer starting at ans
					;will write all answers
 00000123			endThis: 

				exit
 0000012A			main ENDP

 0000012A			writeOut proc
 0000012A  8D 15 0000016B R	lea edx,outname
				;output file name is moved to edx
 00000130  E8 00000000 E	call CreateOutputFile
				;create the file
 00000135  A3 0000017E R	mov outfile,eax
				;mov file handler to outfile
 0000013A  8D 35 00000256 R	lea esi,ans
				;assign beginning of print data to esi
 00000140  B9 0000012F		mov ecx,303
				;set amount of bytes to print
 00000145  8B D6		mov edx,esi
				;mov location of data to edx
 00000147  E8 00000000 E	call WriteToFile
				;begin writing to the file
 0000014C  A1 0000017E R	mov eax,outfile
				;close the file handler to commit changes
 00000151  E8 00000000 E	call closeFile
 00000156  C3			ret
 00000157			writeOut endp

 00000157			readIn PROC
				;read in all of the data at 1 time
 00000157  8D 15 00000000 R	lea edx,infname
				;name of file is set for reading
 0000015D  E8 00000000 E	call OpenInputFile
				;open that file
 00000162  A3 0000000F R	mov infile,eax
				;infile file handler set
 00000167  A1 0000000F R	mov eax,infile

 0000016C  8D 15 00000013 R	lea edx,buff
				;set edx to buffer
 00000172  B9 00000158		mov ecx,344
				;read in 300 bytes
 00000177  E8 00000000 E	call ReadFromFile
				;call readFromFile to do the work
 0000017C  C3			ret
 0000017D			readIn ENDP

 0000017D			ItoA PROC 
						;procedure to convert int to ascii
						;requires esi and eax be set before call
						;esi must be set to a byte size array
 0000017D  BA 00000000				mov edx,0
 00000182  BB 0000000A				mov ebx,10
						;ebx set to 10 for division by 10 to get remainder

 00000187  4F					dec edi
						;decrement esi because esi is set beyond that of array
 00000188  83 F8 00				cmp eax,0
 0000018B  7C 14				jl doThis
						;handles negative numbers
 0000018D			loopsy:
						;beginning of loopsy jne loop

 0000018D  BA 00000000				mov edx,0
						;edx remainder is reset to zero every time

 00000192  F7 F3				div ebx
						;divied eax by ebx which is 10, remainder stored in edx

 00000194  80 C2 30				add dl,30h
						;add 48 which is 30h in hex to current value
						;stored in edx but used as byte size dl

 00000197  88 17				mov [edi],dl
						;move ascii converted value in dl into byte size array esi

 00000199  4F					dec edi
						;move from right to left in array

 0000019A  83 F8 00				cmp eax,0
						;check if eax has anything to divide

 0000019D  75 EE				jne loopsy
						;if eax is equal to zero then we are out of here
 0000019F  EB 19				jmp ending
 000001A1			doThis:
 000001A1  BB FFFFFFFF				mov ebx,-1
 000001A6  F7 E3				mul ebx
						;convert eax into a positive by mul by -1
 000001A8  BB 00000001				mov ebx,1
 000001AD  89 1D 00000252 R			mov isNeg,ebx
						;set isNeg to 1 so that is it true a negative is present
 000001B3  BB 0000000A				mov ebx,10
						;set ebx back to 10
 000001B8  EB D3				jmp loopsy
						;jump back into loopsy
 000001BA			ending:
 000001BA  8B 1D 00000252 R			mov ebx,isNeg
 000001C0  83 FB 00				cmp ebx,0
 000001C3  74 0F				je endNow
						;if isNeg is 0 then get out of here now
 000001C5  B2 2D				mov dl,'-'
 000001C7  88 17				mov [edi],dl
						;put a negative sign out front on converted ItoA
 000001C9  BB 00000000				mov ebx,0
						;set ebx 0
 000001CE  89 1D 00000252 R			mov isNeg,ebx
						;clear isNeg by setting to 0
						
 000001D4			endNow:
 000001D4  C3				ret

 000001D5			ItoA ENDP

 000001D5			AtoI proc
				;convert ascii to integer
 000001D5  B8 00000000		mov eax,0
				;eax is zero
 000001DA  BB 0000000A		mov ebx,10
				;ebx is 10 for multiply
 000001DF  B9 00000000		mov ecx,0
				;ecx is 0
 000001E4			nextChar:
 000001E4  8A 0E				  mov cl,[esi]
						  ;move current esi into cl
					
 000001E6  80 F9 30				  cmp cl,'0'
 000001E9  7C 0F				  jl getOut
						  ;check if cl is less than '0'

 000001EB  83 F9 39				  cmp ecx,'9'
 000001EE  7F 0A				  jg getOut
						  ;check if ecx is greater than '9'

 000001F0  80 C1 D0				  add cl,-30h
						  ;add -30h to cl to convert to single int
 000001F3  F7 E3				  mul ebx
						  ;multiply eax by 10 to make room for single int
 000001F5  03 C1				  add eax,ecx
						  ;add single into to eax
 000001F7  46					  inc esi
						  ;increment esi to next location
 000001F8  EB EA				  jmp nextChar
						  ;unconditional jump to nextChar
 000001FA			getOut: 
 000001FA  E8 00000001				  call pushStk
						  ;push int into stack on the way out of procedure
 000001FF  C3					  ret
 00000200			AtoI endp

 00000200			pushStk  proc

 00000200  50			push eax
				;save eax on user stack
 00000201  53			push ebx
				;save ebx on user stack
 00000202  A1 0000024E R	mov eax,mySize
				;move mySize on eax
 00000207  83 C0 01		add eax,1
				;add one to mySize
 0000020A  A3 0000024E R	mov mySize,eax
				;move the increased stack size to mySize
 0000020F  83 E8 01		sub eax,1
				;remove 1 from eax to get correct stack position at the top
 00000212  BB 00000004		mov ebx,4
				;mov 4 into ebx
 00000217  F7 E3		mul ebx
				;mul eax by 4 to get correct increment for dword
 00000219  8D 3D 00000186 R	lea edi,myStack
				;mov myStack into edi
 0000021F  03 F8		add edi,eax
				;mov to top of myStack
 00000221  5B			pop ebx
				;mov ebx off of user stack and put back in ebx
 00000222  58			pop eax
				;mov eax off of user stack and put back in eax
 00000223  89 07		mov [edi],eax
				;mov the int value on eax

 00000225  C3			ret
 00000226			pushStk endp

 00000226			popStk proc

 00000226  A1 0000024E R	mov eax,mySize
				;mov mySize into eax
 0000022B  53			push ebx
				;save ebx on user stack
 0000022C  83 F8 00		cmp eax,0
 0000022F  74 1A		je endIt
				;if mySize is zero get out of here
 00000231  83 E8 01		sub eax,1
				;remove 1 from total stack size
 00000234  A3 0000024E R	mov mySize,eax
				;save changed size into mySize
 00000239  BB 00000004		mov ebx,4
 0000023E  F7 E3		mul ebx
				;mul by 4 to get correct increment for dword
 00000240  8D 3D 00000186 R	lea edi,myStack
				;set edi to address of myStack
 00000246  03 F8		add edi,eax
				;set edi to top of stack
 00000248  5B			pop ebx
				;pop ebx back off the user stack
 00000249  8B 07		mov eax,[edi]
				;return stop value in myStack using eax

 0000024B			endIt:
 0000024B  C3			ret
 0000024C			popStk endp

 0000024C			checkDo proc
 0000024C			loopIt:
 0000024C  80 F9 2B			cmp cl,'+'
 0000024F  74 50			je L1
 00000251  80 F9 2D			cmp cl,'-'
 00000254  74 55			je L2
 00000256  80 F9 2A			cmp cl,'*'
 00000259  74 5A			je L3
 0000025B  80 F9 20			cmp cl,' '
 0000025E  74 5F			je L4
 00000260  80 F9 0D			cmp cl,0dh
 00000263  74 66			je skip1
 00000265  80 F9 0A			cmp cl,0ah
 00000268  74 66			je skip2
 0000026A  80 F9 30			cmp cl,'0'
 0000026D  74 55			je L5
 0000026F  80 F9 31			cmp cl,'1'
 00000272  74 50			je L5
 00000274  80 F9 32			cmp cl,'2'
 00000277  74 4B			je L5
 00000279  80 F9 33			cmp cl,'3'
 0000027C  74 46			je L5
 0000027E  80 F9 34			cmp cl,'4'
 00000281  74 41			je L5
 00000283  80 F9 35			cmp cl,'5'
 00000286  74 3C			je L5
 00000288  80 F9 36			cmp cl,'6'
 0000028B  74 37			je L5
 0000028D  80 F9 37			cmp cl,'7'
 00000290  74 32			je L5
 00000292  80 F9 38			cmp cl,'8'
 00000295  74 2D			je L5
 00000297  80 F9 39			cmp cl,'9'
 0000029A  74 28			je L5
 0000029C  80 F9 24			cmp cl,'$'
					;setup to kill loop if $ is reached
 0000029F  74 37			je endIt
					;set of jumps to go to different labels based on cl value
 000002A1			L1:
					;do this for addition
 000002A1  E8 00000033			call doAdd
					;adder function
 000002A6  46				inc esi
					;inc esi to next location
 000002A7  8A 0E			mov cl,[esi]
					;setup cl to read data from next location
 000002A9  EB A1			jmp loopIt
					;jump back into the loop
 000002AB			L2:
					;do this for subtraction
 000002AB  E8 0000003D			call doSub
					;sub function
 000002B0  46				inc esi
					;mov esi to next location
 000002B1  8A 0E			mov cl,[esi]
					;set cl to esi new value
 000002B3  EB 97			jmp loopIt
					;jump back in the loop
 000002B5			L3:
					;do this for multiply
 000002B5  E8 00000047			call doMul
					;multiplier function
 000002BA  46				inc esi
					;mov to next esi location
 000002BB  8A 0E			mov cl,[esi]
					;set cl to esi new value
 000002BD  EB 8D			jmp loopIt
					;jump back in the loop
 000002BF			L4:
					;do this for blank spaces
 000002BF  46				inc esi
					;move esi to next location
 000002C0  8A 0E			mov cl,[esi]
					;set cl to new esi value
 000002C2  EB 88			jmp loopIt
					;jump back in the loop
 000002C4			L5:
					;do this for letters 0 through 9
 000002C4  E8 FFFFFF0C			call AtoI
					;convert Ascii to Int
 000002C9  EB 81		    jmp loopIt
					;jump back into the loop
 000002CB			skip1:
					;on carriage return do this 
 000002CB  46				inc esi
					;inc esi to next location
 000002CC  8A 0E			mov cl,[esi]
					;set cl to new esi value
 000002CE  EB 08			jmp endit
					;end the loop and get out of here
 000002D0			skip2:
					;on linefeed do this
 000002D0  46				inc esi
					;inc esi to next location
 000002D1  8A 0E			mov cl,[esi]
					;set cl to new esi value
 000002D3  E9 FFFFFF74			jmp loopit
					;jump back in the loop

 000002D8			endIt:
 000002D8  C3			ret
 000002D9			checkDo endp

 000002D9			doAdd proc
					;do this for adding
 000002D9  E8 FFFFFF48			call popStk
					;return and remove top of stack
 000002DE  8B D8			mov ebx,eax
					;move top into ebx
 000002E0  E8 FFFFFF41			call popStk
					;return and remove top of stack
 000002E5  03 C3			add eax,ebx
					;add eax and ebx items from stack
 000002E7  E8 FFFFFF14			call pushStk
					;push added value back onto stack
 000002EC  C3			ret
 000002ED			doAdd endp

 000002ED			doSub proc
					;do this for subtraction
 000002ED  E8 FFFFFF34			call popStk
					;return and remove top of stack
 000002F2  8B D8			mov ebx,eax
					;move returned stack top into ebx
 000002F4  E8 FFFFFF2D			call popStk
					;return and remove top of stack
 000002F9  2B C3			sub eax,ebx
					;subtract ebx from eax
 000002FB  E8 FFFFFF00			call pushStk
					;push subtracted value back onto stack
 00000300  C3			ret
 00000301			doSub endp

 00000301			doMul proc
					;do this for multiplication
 00000301  E8 FFFFFF20			call popStk
					;return and remove top of stack
 00000306  8B D8			mov ebx,eax
					;move returned stack top into ebx
 00000308  E8 FFFFFF19			call popStk
					;return and remove top of stack
 0000030D  F7 E3			mul ebx
					;multiply eax and ebx
 0000030F  E8 FFFFFEEC			call pushStk
					;push multiplication value back onto stack
 00000314  C3			ret
 00000315			doMul endp

				END MAIN
Microsoft (R) Macro Assembler Version 11.00.50727.1	    06/23/15 14:40:24
%MASM Postfix Evaluation				(main.asm  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000386 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000315 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtoI . . . . . . . . . . . . . .	P Near	 000001D5 _TEXT	Length= 0000002B Public STDCALL
  nextChar . . . . . . . . . . .	L Near	 000001E4 _TEXT	
  getOut . . . . . . . . . . . .	L Near	 000001FA _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ItoA . . . . . . . . . . . . . .	P Near	 0000017D _TEXT	Length= 00000058 Public STDCALL
  loopsy . . . . . . . . . . . .	L Near	 0000018D _TEXT	
  doThis . . . . . . . . . . . .	L Near	 000001A1 _TEXT	
  ending . . . . . . . . . . . .	L Near	 000001BA _TEXT	
  endNow . . . . . . . . . . . .	L Near	 000001D4 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkDo  . . . . . . . . . . . .	P Near	 0000024C _TEXT	Length= 0000008D Public STDCALL
  loopIt . . . . . . . . . . . .	L Near	 0000024C _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000002A1 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000002AB _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000002B5 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000002BF _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 000002C4 _TEXT	
  skip1  . . . . . . . . . . . .	L Near	 000002CB _TEXT	
  skip2  . . . . . . . . . . . .	L Near	 000002D0 _TEXT	
  endIt  . . . . . . . . . . . .	L Near	 000002D8 _TEXT	
doAdd  . . . . . . . . . . . . .	P Near	 000002D9 _TEXT	Length= 00000014 Public STDCALL
doMul  . . . . . . . . . . . . .	P Near	 00000301 _TEXT	Length= 00000014 Public STDCALL
doSub  . . . . . . . . . . . . .	P Near	 000002ED _TEXT	Length= 00000014 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000012A Public STDCALL
  endThis  . . . . . . . . . . .	L Near	 00000123 _TEXT	
popStk . . . . . . . . . . . . .	P Near	 00000226 _TEXT	Length= 00000026 Public STDCALL
  endIt  . . . . . . . . . . . .	L Near	 0000024B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
pushStk  . . . . . . . . . . . .	P Near	 00000200 _TEXT	Length= 00000026 Public STDCALL
readIn . . . . . . . . . . . . .	P Near	 00000157 _TEXT	Length= 00000026 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeOut . . . . . . . . . . . .	P Near	 0000012A _TEXT	Length= 0000002D Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ans10  . . . . . . . . . . . . .	Byte	 00000325 _DATA	
ans11  . . . . . . . . . . . . .	Byte	 0000033D _DATA	
ans12  . . . . . . . . . . . . .	Byte	 00000355 _DATA	
ans13  . . . . . . . . . . . . .	Byte	 0000036D _DATA	
ans2 . . . . . . . . . . . . . .	Byte	 0000026D _DATA	
ans3 . . . . . . . . . . . . . .	Byte	 00000284 _DATA	
ans4 . . . . . . . . . . . . . .	Byte	 0000029B _DATA	
ans5 . . . . . . . . . . . . . .	Byte	 000002B2 _DATA	
ans6 . . . . . . . . . . . . . .	Byte	 000002C9 _DATA	
ans7 . . . . . . . . . . . . . .	Byte	 000002E0 _DATA	
ans8 . . . . . . . . . . . . . .	Byte	 000002F7 _DATA	
ans9 . . . . . . . . . . . . . .	Byte	 0000030E _DATA	
ans  . . . . . . . . . . . . . .	Byte	 00000256 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buff . . . . . . . . . . . . . .	Byte	 00000013 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
infile . . . . . . . . . . . . .	DWord	 0000000F _DATA	
infname  . . . . . . . . . . . .	Byte	 00000000 _DATA	
isNeg  . . . . . . . . . . . . .	DWord	 00000252 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mySize . . . . . . . . . . . . .	DWord	 0000024E _DATA	
myStack  . . . . . . . . . . . .	DWord	 00000186 _DATA	
outfile  . . . . . . . . . . . .	DWord	 0000017E _DATA	
outname  . . . . . . . . . . . .	Byte	 0000016B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stop10 . . . . . . . . . . . . .	Byte	 0000033B _DATA	
stop11 . . . . . . . . . . . . .	Byte	 00000353 _DATA	
stop12 . . . . . . . . . . . . .	Byte	 0000036B _DATA	
stop13 . . . . . . . . . . . . .	Byte	 00000383 _DATA	
stop1  . . . . . . . . . . . . .	Byte	 0000026B _DATA	
stop2  . . . . . . . . . . . . .	Byte	 00000282 _DATA	
stop3  . . . . . . . . . . . . .	Byte	 00000299 _DATA	
stop4  . . . . . . . . . . . . .	Byte	 000002B0 _DATA	
stop5  . . . . . . . . . . . . .	Byte	 000002C7 _DATA	
stop6  . . . . . . . . . . . . .	Byte	 000002DE _DATA	
stop7  . . . . . . . . . . . . .	Byte	 000002F5 _DATA	
stop8  . . . . . . . . . . . . .	Byte	 0000030C _DATA	
stop9  . . . . . . . . . . . . .	Byte	 00000323 _DATA	
temp . . . . . . . . . . . . . .	DWord	 00000182 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
